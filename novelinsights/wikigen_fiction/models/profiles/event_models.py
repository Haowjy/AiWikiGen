# generated by datamodel-codegen:
#   filename:  event_schema.json
#   timestamp: 2024-10-15T01:41:18+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
import jsonref

from pydantic import BaseModel, Field


class Type(Enum):
    battle = 'battle'
    political = 'political'
    personal = 'personal'
    natural_disaster = 'natural disaster'
    supernatural = 'supernatural'
    other = 'other'

class InvolvedCharacter(BaseModel):
    name: str = Field(..., description='Name of the character involved')
    role: Optional[str] = Field(
        None, description="The character's role or involvement in the event"
    )

class RelatedEvent(BaseModel):
    name: str = Field(..., description='Name of the related event')
    relationship: Optional[str] = Field(
        None, description='How this event is related to the main event'
    )

class EventModel(BaseModel):
    class Config:
        extra = 'forbid'

    name: str = Field(..., description='The primary name or title of the event')
    aliases: Optional[List[str]] = Field(
        None, description='Alternative names or titles for the event'
    )
    type: Type = Field(..., description='The category or type of the event')
    overview: str = Field(
        ...,
        description='A concise summary of the event, capturing its essence and key points',
    )
    significance: str = Field(
        ...,
        description="The event's importance to the plot and its impact on the story and characters",
    )
    chronology: str = Field(
        ...,
        description='A sequential account of what happened during the event, including key moments and outcomes. For longer descriptions, use markdown with headers and subheaders to organize.',
    )
    background: Optional[str] = Field(
        None,
        description='Detailed information about the context and lead-up to the event. For longer descriptions, use markdown with headers and subheaders to organize.',
    )
    involved_characters: Optional[List[InvolvedCharacter]] = Field(
        None,
        description='List of characters who played a significant role in the event',
    )
    locations: Optional[List[str]] = Field(
        None, description='Key locations associated with the event'
    )
    related_events: Optional[List[RelatedEvent]] = Field(
        None,
        description='Other events that are directly connected to or influenced by this event',
    )
    
    def to_json_schema():
        ret = jsonref.replace_refs(super().model_json_schema(), proxies=False)
        del ret['$defs']
        return ret
