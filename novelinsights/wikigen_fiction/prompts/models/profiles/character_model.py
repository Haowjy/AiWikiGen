# generated by datamodel-codegen:
#   filename:  character_schema.json
#   timestamp: 2024-10-15T01:39:45+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
import jsonref

from pydantic import BaseModel, Field

class EntityType(Enum):
    character = 'character'
    monster = 'monster'
    abstract_force = 'abstract_force'


class Description(BaseModel):
    appearance: Optional[str] = Field(
        None, description='Physical description or manifestation of the entity'
    )
    characteristics: Optional[str] = Field(
        None,
        description='Fundamental traits, behavior patterns, or defining features of the entity',
    )
    capabilities: Optional[str] = Field(
        None,
        description='Key abilities, powers, or notable effects associated with the entity',
    )


class Connection(BaseModel):
    name: Optional[str] = None
    relation: Optional[str] = None
    description: Optional[str] = None


class CharacterModel(BaseModel):
    class Config:
        extra = 'forbid'

    name: str = Field(..., description="The entity's primary name or identifier")
    entity_type: EntityType = Field(
        ..., description='The type of entity being described'
    )
    aliases: Optional[List[str]] = Field(
        None, description='Alternative names or identifiers'
    )
    overview: str = Field(
        ...,
        description='A concise summary of the entity, including its essence, role, and key traits',
    )
    significance: str = Field(
        ...,
        description="The entity's importance to the plot and how it impacts the story",
    )
    description: Optional[Description] = None
    background: Optional[str] = Field(
        None,
        description='Detailed description of origins, history, and development of the entity throughout the story. For longer descriptions, use markdown with headers and subheaders to organize.',
    )
    connections: Optional[List[Connection]] = Field(
        None,
        description='Key relationships or interactions with other entities in the story',
    )
    def to_json_schema():
        ret = jsonref.replace_refs(super().model_json_schema(), proxies=False)
        del ret['$defs']
        return ret