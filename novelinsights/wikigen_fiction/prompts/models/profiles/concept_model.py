# generated by datamodel-codegen:
#   filename:  concept_schema.json
#   timestamp: 2024-10-15T01:41:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
import jsonref

from pydantic import BaseModel, Field


class Category(Enum):
    magic_system = 'magic_system'
    technology = 'technology'
    culture = 'culture'
    politics = 'politics'
    religion = 'religion'
    philosophy = 'philosophy'
    science = 'science'
    language = 'language'
    other = 'other'


class RelatedTerm(BaseModel):
    term: str = Field(..., description='A related term or concept')
    relationship: Optional[str] = Field(
        None, description='How this term is related to the main concept'
    )


class FirstAppearance(BaseModel):
    chapter: float = Field(
        ...,
        description='The chapter number where this concept is first introduced or explained',
    )
    context: Optional[str] = Field(
        None, description='Brief description of how the concept was introduced'
    )


class ConceptModel(BaseModel):
    class Config:
        extra = 'forbid'

    term: str = Field(..., description='The primary word or phrase for the concept')
    category: Category = Field(
        ..., description='The general category this concept belongs to'
    )
    aliases: Optional[List[str]] = Field(
        None, description='Alternative terms or phrases for this concept'
    )
    definition: str = Field(
        ..., description='A concise explanation of what the term means'
    )
    detailed_explanation: str = Field(
        ...,
        description='A more in-depth explanation of the concept, its nuances, and its significance. Use markdown headers and subheaders for formatting if needed.',
    )
    significance: Optional[str] = Field(
        None,
        description='The importance or impact of this concept on the story, characters, or world',
    )
    origin: Optional[str] = Field(
        None,
        description='Information about where this concept came from or how it was introduced in the story',
    )
    related_terms: Optional[List[RelatedTerm]] = Field(
        None,
        description='Other terms or concepts that are closely related or connected',
    )
    examples: Optional[List[str]] = Field(
        None,
        description='Specific examples or instances of the concept being used or applied in the story',
    )
    first_appearance: Optional[FirstAppearance] = None
    
    def to_json_schema():
        ret = jsonref.replace_refs(super().model_json_schema(), proxies=False)
        del ret['$defs']
        return ret