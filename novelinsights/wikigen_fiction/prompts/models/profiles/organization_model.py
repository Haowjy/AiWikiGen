# generated by datamodel-codegen:
#   filename:  organization_schema.json
#   timestamp: 2024-10-15T01:41:36+00:00

from __future__ import annotations

from typing import List, Optional
import jsonref

from pydantic import BaseModel, Field


class KeyMember(BaseModel):
    name: Optional[str] = None
    role: Optional[str] = None
    description: Optional[str] = None


class Connection(BaseModel):
    entity: Optional[str] = None
    nature: Optional[str] = None
    description: Optional[str] = None


class OrganizationModel(BaseModel):
    class Config:
        extra = 'forbid'

    name: str = Field(..., description='The official name of the organization')
    aliases: Optional[List[str]] = Field(
        None, description='Alternative names or nicknames for the organization'
    )
    overview: str = Field(
        ...,
        description='A concise summary of the organization, its purpose, role in the story, and current goals',
    )
    significance: str = Field(
        ...,
        description="The organization's importance to the plot and its impact on the story world",
    )
    background: str = Field(
        ...,
        description='Detailed history and lore of the location. For longer descriptions, use markdown with headers and subheaders to organize.',
    )
    key_members: Optional[List[KeyMember]] = Field(
        None, description='Important individuals associated with the organization'
    )
    connections: Optional[List[Connection]] = Field(
        None,
        description='Key relationships with other organizations, groups, or significant characters',
    )
    
    def to_json_schema():
        ret = jsonref.replace_refs(super().model_json_schema(), proxies=False)
        del ret['$defs']
        return ret
